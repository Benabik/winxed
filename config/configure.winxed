#! winxed

// Winxed configure, under development.

// Type for handled exceptions.
const int CONFIGURE_EX = 9000;

function config_fail()
{
    throw Error('ERROR: Cannot get parrot config', 2, CONFIGURE_EX);
}

class Config
{
    var config_hash; // Parrot config options

    function init [vtable] ()
    {
        // Harcoded value.
        // TODO: get the value from parrot, when there is way
        // that doesn't need to .include pasm.
        const int IGLOBALS_CONFIG_HASH = 6;

        var interp = getinterp();
        var config_hash = interp[IGLOBALS_CONFIG_HASH];

        // Sanity check
        if (config_hash == null)
           config_fail();
        string version = config_hash['VERSION'];
        if (version == null || version == '')
           config_fail();

        self.config_hash = config_hash;
    }
    function get(string key)
    {
        var config_hash = self.config_hash;
        var v = config_hash[key];
        return string(v);
    }
}

//**********************************************************************

function readfile(string filename)
// Read full filename content and return it as a string
{
    var file = open(filename);
    string content = file.readall();
    file.close();
    return content;
}

//**********************************************************************

function genfromtemplate(string tmplfilename, string outfilename,
        var tmplvars, int verbose)
{
    if (verbose)
        say("Reading template '", tmplfilename, "'...");
    string make;
    try {
        make = readfile(tmplfilename);
    }
    catch(e) {
        string msg = e['message'];
        throw Error('Reading template file: ' + msg, 2, CONFIGURE_EX);
    }
    for (string varname in tmplvars) {
        string tkey = '{' + varname + '}';
        int l = length(tkey);
        string value = tmplvars[varname];
        int pos;
        while ((pos = indexof(make, tkey)) != -1)
            make = substr(make, 0, pos) + value + substr(make, pos + l);
    }

    if (verbose)
        say("Generating Makefile...");
    var outfile;
    int usestdout = outfilename == '';
    if (usestdout)
        outfile = getinterp().stdhandle(1);
    else
        outfile = open(outfilename, 'wt');
    outfile.print(make);
    if (! usestdout)
        outfile.close();
    if (verbose)
        say("Done.");
}

//**********************************************************************

function config_main(argv)
{
    // Template variables
    string keys[] = [ 'cxx', 'link', 'ccflags', 'o', 'exe' ];
    // Other command line options
    const string OPT_VERBOSE = 'v';
    const string OPT_TMPL = 'tmpl';
    const string OPT_MAKEFILE = 'makefile';

    using extern Getopt.Obj;
    var getopts = new Getopt.Obj();
    getopts.notOptStop(1);
    for (string key in keys)
        getopts.push_string(key + '=s');
    getopts.push_string(OPT_VERBOSE);
    getopts.push_string(OPT_TMPL + '=s');
    getopts.push_string(OPT_MAKEFILE + '=s');

    argv.shift();
    var opts = getopts.get_options(argv);
    int verbose = opts[OPT_VERBOSE] != null;

    // Set template variables to values from command line
    // and defaults from parrot config.
    var config = new Config();
    var tmplvars = {};
    for (string varname in keys) {
        if (opts[varname] != null)
            tmplvars[varname] = opts[varname];
        else
            tmplvars[varname] = config.get(varname);
    }

    // Template and generated Makefile filenames.
    string tmplfilename = 'config/make.in';
    if (opts[OPT_TMPL] != null)
        tmplfilename = opts[OPT_TMPL];
    string makefilename = 'Makefile';
    if (opts[OPT_MAKEFILE] != null)
        makefilename = opts[OPT_MAKEFILE];

    genfromtemplate(tmplfilename, makefilename, tmplvars, verbose);
}

function main(args)
{
    try [handle_types(CONFIGURE_EX)] {
        config_main(args);
    }
    catch (e)
    {
        say(e['message']);
        exit(1);
    }
}

// End
