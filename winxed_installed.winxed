#! winxed

// Winxed compiler driver.

$include_const 'iglobals.pasm';
$include_const 'libpaths.pasm';
$include_const 'except_types.pasm';

$load 'Getopt/Obj.pbc';

class WinxedDriverOptions : [ 'Getopt', 'Obj']
{
    var name;
    var options;
    var opts;

    function WinxedDriverOptions(argv)
    {
        var options = [
          [ 'c',        'Compile only. Same as --target=pir' ],
          [ 'e=s',      'Evaluate' ],
          [ 'L=s',      'Add to parrot library search path' ],
          [ 'I=s',      'Add to parrot include search path' ],
          [ 'nowarn',   'No warnings' ],
          [ 'help',     'Show this help' ]
        ];
        self.options = options;
        for (var o in options)
            self.push_string(o[0]);
        self.notOptStop(1);
        self.name = argv.shift();
        self.opts = self.get_options(argv);
    }
    function getbool(string option)
    {
        var value = self.opts[option];
        return value != null;
    }
    function getstring(string option)
    {
        var value = self.opts[option];
        string result = null;
        if (value != null)
            result = value;
        return result;
    }
    function showhelp()
    {
        say('Usage: ', self.name, ' [options] [program] [args]');
        say('  Available options:');
        int l= 0;
        int i;
        var o;
        for (o in self.options) {
            i= length(o[0]) + 4;
            if (i > l) l= i;
        }
        for (o in self.options) {
            string s= o[0];
            if (length(s) > 1 && substr(s, 1, 1) != '=')
                s= '--' + s;
            else
                s= '-' + s;
            i= l - length(s);
            say('    ', s, ' ' * i, '->  ', o[1]);
        }
    }
}


function extname(string filename, string ext)
{
    // Strip a possible .winxed extension from filename,
    // add ext, and return the result.
    string newname;
    int l = length(filename);
    if (l > 7 && substr(filename, -7) == '.winxed')
        newname = substr(filename, 0, l - 7) + ext;
    else
        newname = filename + ext;
    return newname;
}

function main [main] (argv)
{
    var optionset = new WinxedDriverOptions(argv);

    int help        = optionset.getbool('help');
    int compileonly = optionset.getbool('c');
    string eval     = optionset.getstring('e');
    string opt_L    = optionset.getstring('L');
    string opt_I    = optionset.getstring('I');
    int nowarn      = optionset.getbool('nowarn');

    if (help) {
        optionset.showhelp();
        exit(0);
    }

    var compiler = load_language('winxed');
    if (compiler == null)
        die("winxed: Cannot load language");

    if (opt_L != null) {
        var interp;
        ${ getinterp interp };
        var lpaths = interp[IGLOBALS_LIB_PATHS];
        var pathlib = lpaths[PARROT_LIB_PATH_LIBRARY];
        pathlib.push(string(opt_L));
    }
    if (opt_I != null) {
        var interp;
        ${ getinterp interp };
        var lpaths = interp[IGLOBALS_LIB_PATHS];
        var pathlib = lpaths[PARROT_LIB_PATH_INCLUDE];
        pathlib.push(string(opt_I));
    }

    var code;

    if (eval == null) {
        if (elements(argv) < 1) {
            say("ERROR: No program specified");
            optionset.showhelp();
            exit(1);
        }
        string srcfile = argv[0];
        if (compileonly) {
            var handleout = new 'StringHandle';
            handleout.open('', 'w');
            compiler.compile_from_file_to_pir(srcfile, handleout,
                    nowarn:[named("nowarn")]);
            handleout.close();
            string pircode = handleout.read(0);
            string pirfile = extname(srcfile, '.pir');
            var outfile = open(pirfile, 'w');
            outfile.print(pircode);
            outfile.close();
            exit(0);
        }
        else
            code = compiler.compile_from_file(srcfile,
                    nowarn:[named("nowarn")]);
    }
    else {
        string expr = 'function main[main](argv){' + eval + ';}';
        if (compileonly) {
            code = compiler.compile(expr, "pir":[named("target")],
                    nowarn:[named("nowarn")]);
            print(code);
            exit(0);
        }
        else {
            code = compiler.compile(expr,
                    nowarn:[named("nowarn")]);
            argv.unshift('__EVAL__');
        }
    }

    // Simplified progrm start: look for a sub called 'main'
    var sub;
    for (int i = 0; ; ++i) {
        sub = code[i];
        if (sub == null) break;
        if (string(sub) == 'main') break;
    }

    int retval = 0;
    try [handle_types_except(CONTROL_EXIT)] {
        var retvalp = sub(argv);
        if (retvalp != null)
            retval = retvalp;
    }
    catch (e) {
        string msg = e['message'];
        if (msg != null && msg != '')
            cry(msg);
        retval = 1;
    }
    exit(retval);
}

// End
