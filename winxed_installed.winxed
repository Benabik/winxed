#! winxed

// Winxed compiler driver.

function showhelp(string name, options)
{
    say('Usage: ', name, ' [options] [program] [args]');
    say('  Available options:');
    int l= 0;
    int i;
    var o;
    for (o in options) {
        i= length(o[0]) + 4;
        if (i > l) l= i;
    }
    for (o in options) {
        string s= o[0];
        if (length(s) > 1 && substr(s, 1, 1) != '=')
            s= '--' + s;
        else
            s= '-' + s;
        i= l - length(s);
        say('    ', s, ' ' * i, '->  ', o[1]);
    }
}

function extname(string filename, string ext)
{
    // Strip a possible .winxed extension from filename,
    // add ext, and return the result.
    string newname;
    int l = length(filename);
    if (l > 7 && substr(filename, -7) == '.winxed')
        newname = substr(filename, 0, l - 7) + ext;
    else
        newname = filename + ext;
    return newname;
}

function main [main] (argv)
{
    var options = [
      [ 'c',        'Compile only' ],
      [ 'e=s',      'Evaluate' ],
      [ 'help',     'Show this help' ]
    ];

    using extern Getopt.Obj;
    var getopts = new Getopt.Obj();
    getopts.notOptStop(1);
    for (var o in options)
        getopts.push_string(o[0]);
    string name= argv.shift();
    var opts = getopts.get_options(argv);

    var help        = opts['help'];
    var compileonly = opts['c'];
    var eval        = opts['e'];

    if (help != null) {
        showhelp(name, options);
        return;
    }

    var compiler = load_language('winxed');
    if (compiler == null)
        die("winxed: Cannot load language");

    var code;

    if (eval == null) {
        if (elements(argv) < 1) {
            say("ERROR: No program specified");
            showhelp(name, options);
            return 1;
        }
        string srcfile = argv[0];
        if (compileonly != null) {
            var handleout = new 'StringHandle';
            handleout.open('', 'w');
            compiler.compile_from_file_to_pir(srcfile, handleout);
            handleout.close();
            string pircode = handleout.read(0);
            string pirfile = extname(srcfile, '.pir');
            var outfile = open(pirfile, 'w');
            outfile.print(pircode);
            outfile.close();
            return 0;
        }
        else
            code = compiler.compile_from_file(srcfile);
    }
    else {
        if (compileonly != null)
            die('option -c with -e not supported yet');
        string expr = 'function main[main](argv){' + string(eval) + ';}';
        code = compiler.compile(expr);
        argv.unshift('__EVAL__');
    }

    // Simplified progrm start: look for a sub called 'main'
    var sub;
    for (int i = 0; ; ++i) {
        sub = code[i];
        if (sub == null) break;
        if (string(sub) == 'main') break;
    }

    try {
        sub(argv);
    }
    catch (e) {
        string msg = e['message'];
        cry(e);
        return 1;
    }
}

// End
