#! winxed

// This example uses the Xlib.pir module that is provided
// in the examples/nci directory of the parrot source.
//
// To execute it directly from command line you can do:
//     winxed -L /parrot_source_dir/examples/nci xlibtest.winxed
//
// To exit close the window or press Esc.
// Backspace key delete the last item drawed.
// Delete key delete all lines.

// Warning: uses syntax not available in stage 0

// Event selection masks
const int
    KeyPressMask      = 0x00000001,
    ButtonPressMask   = 0x00000004,
    ButtonReleaseMask = 0x00000008,
    PointerMotionMask = 0x00000040,
    ExposureMask      = 0x00008000;

// Event types
const int
    KeyPress      =  2,
    ButtonPress   =  4,
    ButtonRelease =  5,
    MotionNotify  =  6,
    Expose        = 12,
    ClientMessage = 33;

// Key for json line data
const string JKEY_LINES = 'lines';

function getKeycode(display, string keyname)
{
    using Xlib.StringToKeysym;
    int keysym = StringToKeysym(keyname);
    return display.KeysymToKeycode(keysym);
}

function load(string filename)
{
    var listline;
    if (filename == null || filename == '')
        listline = [];
    else {
        try {
            var handle = open(filename);
            var jsondata = handle.readall();
            handle.close();
            var json = load_language('data_json');
            var object = json.compile(jsondata)();
            listline = object[JKEY_LINES];
        }
        catch() {
            listline = [];
        }
    }
    return listline;
}

function save(string filename, var listline)
{
    var object = { JKEY_LINES : listline };
    using extern JSON;
    var jsondata = _json(object);
    var handle = open(filename, 'w');
    handle.print(jsondata);
    handle.print("\n");
    handle.close();
}

function xlibtest [main] (args)
{
    string filename = args[1];

    using extern Xlib;
    using Xlib.DisplayName;
    using Xlib.OpenDisplay;
    using Xlib.newEvent;

    say(DisplayName());
    var display= OpenDisplay();
    say('DefaultScreen: ', display.DefaultScreen());

    int Escape    = getKeycode(display, 'Escape');
    int Delete    = getKeycode(display, 'Delete');
    int BackSpace = getKeycode(display, 'BackSpace');
    int codeS     = getKeycode(display, 'S');

    var rootwin= display.RootWindow();
    int white= display.WhitePixel();
    var window= display.CreateSimpleWindow(rootwin, 0, 0, 600, 400, 0, 0, white);

    window.SelectInput(KeyPressMask |
        ButtonPressMask | ButtonReleaseMask | PointerMotionMask |
        ExposureMask);
    window.StoreName('Hello, winxed!');

    window.Map();

    int pressed= 0;
    int looping= 1;
    int oldx;
    int oldy;

    var listline = load(filename);
    var line;
    var event= newEvent();
    while (looping)
    {
        display.NextEvent(event);
        int t= event.type();
        switch(t) {
        case ButtonPress:
            pressed= 1;
            oldx= event.x();
            oldy= event.y();
            line = new 'ResizablePMCArray';
            listline.push(line);
            line.push(oldx);
            line.push(oldy);
            window.DrawPoint(oldx, oldy);
            break;
        case ButtonRelease:
            pressed= 0;
            break;
        case MotionNotify:
            if (pressed)
            {
                int x= event.x();
                int y= event.y();
                if (x != oldx || y != oldy)
                {
                    window.DrawLine(oldx, oldy, x, y);
                    oldx= x; oldy= y;
                    line.push(oldx);
                    line.push(oldy);
                }
            }
            break;
        case Expose:
            var l;
            for (l in listline)
            {
                int n= l;
                if (n > 2)
                {
                    int px= l[0];
                    int py= l[1];
                    for (int i= 2; i < n; i+= 2)
                    {
                        int nx=l[i];
                        int ny=l[i + 1];
                        window.DrawLine(px, py, nx, ny);
                        px= nx; py= ny;
                    }
                }
                else
                    window.DrawPoint(l[0], l[1]);
            }
            break;
        case ClientMessage:
            looping= 0;
            break;
        case KeyPress:
            switch (event.keycode())
            {
            case Escape:
                looping= 0;
                break;
            case BackSpace:
                if (listline) {
                    line= listline.pop();
                    if (listline) {
                        line= listline.pop();
                    }
                    else {
                        line = new 'ResizablePMCArray';
                    }
                    listline.push(line);
                }
                window.ClearArea(0, 0, 0, 0, 1);
                say('Hi');
                break;
            case Delete:
                listline= new 'ResizablePMCArray';
                window.ClearArea(0, 0, 0, 0, 1);
                break;
            case codeS:
                save(filename, listline);
                break;
            }
            break;
        default:
            say('Hi');
        }
    }
    window.Unmap();
    window.Destroy();
    display.Close();
}
