#! winxed

// parsing example

//*********************************************
//          Character test functions
//*********************************************

function isspace(string c)
{
    return c == ' ' || c == "\n" || c == "\t";
}

function isdigit(string c)
{
    return indexof('0123456789', c) > -1;
}

function isidentstart(string c)
{
    return indexof(
        'abcdefghijklmnopqrstuvwxyz' +
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '_',
        c) > -1;
}

function isident(string c)
{
    return indexof(
        'abcdefghijklmnopqrstuvwxyz' +
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '_' +
        '0123456789',
        c) > -1;
}


//*********************************************
//                Token
//*********************************************

const int TypeEof          = -1;
const int TypeComment      = 0;
const int TypeOp           = 1;
const int TypeQuoted       = 2;
const int TypeSingleQuoted = 3;
const int TypeIdentifier   = 4;
const int TypeInteger      = 5;

function TokenError(string msg, tk, int line)
{
   string sline= line;
   string file= tk.filename;
   string m= msg + ' in '+ file + ' line ' + sline;
   var ex= Error(m, 2, 555);
   return ex;
}

class Token
{
    var type;
    var str;
    var file;
    var line;
    function get_bool[vtable]()
    {
        return self.type != TypeEof;
    }
    function iseof()     { return self.type == TypeEof; }
    function iscomment() { return self.type == TypeComment; }
    function isint()     { return self.type == TypeInteger; }
    function isstring()
    {
        return self.type == TypeQuoted || self.type == TypeSingleQuoted;
    }
    function isidentifier() { return self.type == TypeIdentifier; }
    function iskeyword(string name)
    {
        return self.type == TypeIdentifier && self.str == name;
    }
    function isop(string name)
    {
        return self.type == TypeOp && self.str == name;
    }

    function get_string[vtable]()
    {
        string str= self.str;
        switch (self.type)
        {
        case TypeQuoted:
            str= '"' + str + '"';
            break;
        case TypeSingleQuoted:
            str= "'" + str + "'";
            break;
        }
        return str;
    }
}

function newToken(int type, string s, var file, int line)
{
    var t= new Token;
    t.type= type; t.str= s; t.file= file; t.line= line;
    return t;
}

//*********************************************
//       Tokenizer auxiliar functions
//*********************************************

function getquoted(tk, string start, int line)
{
    string s;
    string c= tk.getchar();
    while (c != '"')
    {
        if (c == '' || c == "\n")
            throw TokenError('Unterminated string', tk, line);
        s+= c;
        c= tk.getchar();
    }
    return newToken(TypeQuoted, s, tk.filename, line);
}

function getsinglequoted(tk, string start, int line)
{
    string s;
    string c= tk.getchar();
    while (c != "'")
    {
        if (c == '' || c == "\n")
            throw TokenError('Unterminated string', tk, line);
        s+= c;
        c= tk.getchar();
    }
    return newToken(TypeSingleQuoted, s, tk.filename, line);
}

function getident(tk, string start, int line)
{
    string s= start;
    string c= tk.getchar();
    while (isident(c))
    {
        s+= c;
        c= tk.getchar();
    }
    tk.ungetchar(c);
    return newToken(TypeIdentifier, s, tk.filename, line);
}

function getlinecomment(tk, string start, int line)
{
    string s= start;
    string c= tk.getchar();
    while (c != '' && c != "\n")
    {
        s+= c;
        c= tk.getchar();
    }
    return newToken(TypeComment, s, tk.filename, line);
}

function getcomment(tk, string start, int line)
{
    string s= start;
    string c= tk.getchar();
next:
    while (c != '' && c != '*')
    { s+= c; c= tk.getchar(); }
    if (c == '')
        throw Error("Unclosed comment");
    c= tk.getchar();
    if (c == '')
        throw Error("Unclosed comment");
    if (c != '/')
    { s+= '*' + c; goto next; }
    s+= '*/';
    return newToken(TypeComment, s, tk.filename, line);
}

function getop(tk, string start, int line)
{
    string s= start;
    var t= new Token;
    return newToken(TypeOp, s, tk.filename, line);
}

//*********************************************
//              Tokenizer
//*********************************************

class Tokenizer
{
    var h;
    var pending;
    var select;
    var stacked;
    var filename;
    var line;
    function init(handle, string filename)
    {
        self.h= handle;
        self.pending= new 'String';
        self.stacked= [];
        self.filename= filename;
        self.line= 1;
        var select = {
            '"': { '': getquoted },
            "'": { '': getsinglequoted },
            '=': { '=': getop },
            '+': { '+': getop, '=': getop },
            '-': { '-': getop, '=': getop },
            '|': { '|': getop },
            '&': { '&': getop },
            '<': { '<': getop, '=': getop },
            '>': { '>': getop, '=': getop },
            '!': { '=': getop },
            '%': { '%': getop },
            '/': { '/': getlinecomment, '*': getcomment },
            '#': { '': getlinecomment }
        };
        self.select= select;
    }
    function getchar()
    {
        string pending= self.pending;
        if (pending != '')
        {
            self.pending= '';
            return pending;
        }
        var h= self.h;
        string c= h.read(1);
        if (c == "\n")
        {
                int l=self.line;
                ++l;
                self.line= l;
        }
        return c;
    }
    function ungetchar(string c)
    {
        self.pending= c;
    }
    function get_token()
    {
        if (self.stacked) {
            var t= self.stacked.pop();
            return t;
        }
        string c= self.getchar();
        while (isspace(c))
                c= self.getchar();
        int line= self.line;
        if (c == '')
        {
            var t= new Token;
            t.type= TypeEof;
            return t;
        }
        if (isidentstart(c)) return getident(self, c, line);
        var select = self.select;
        var current= select[c];
        if (current)
        {
            string c2= self.getchar();
            var current2= current[c2];
            if (current2)
            {
                c+= c2;
                return current2(self, c, line);
            }
            else
            {
                self.ungetchar(c2);
                current2= current[''];
                if (current2)
                    return current2(self, c, line);
            }
        }
        if (isdigit(c)) {
            string s;
            do {
                s+= c;
                c= self.getchar();
            } while (isdigit(c));
            self.ungetchar(c);
            return newToken(TypeInteger, s, self.filename, line);
        }
        return getop(self, c, line);
    }
    function get(int withcomments [optional])
    {
        var t= self.get_token();
        while (!t.iseof() && ! withcomments && t.iscomment() )
           t= self.get_token();
        return t;
    }
    function unget(t) { self.stacked.push(t); }
}

//*********************************************
//            Miniwinxed
//*********************************************

// This is a first step towards a possible bootstraped version.

function namespacekey(var path)
{
    string s = '.namespace [';
    string sep= " '";
    for (string n in path) {
        s+= sep;
        sep=" ; '";
        s+= n + "'";
    }
    s+= " ]";
    return s;
}

//*********************************************
//            Emit
//*********************************************

class Emit
{
    var handle;
    var file;
    var line;
    var pendingf;
    var pendingl;
    function initialize(var handle)
    {
        self.handle= handle;
        self.file= '';
        self.line= 0;
        self.pendingf= 0;
        self.pendingl= 0;
    }
    function updateannot()
    {
        if (self.pendingf) {
            self.handle.print(".annotate 'file', '");
            self.handle.print(self.file);
            self.handle.print("'");
            self.handle.print("\n");
            self.pendingf= 0;
        }
        if (self.pendingl) {
            self.handle.print(".annotate 'line', ");
            self.handle.print(self.line);
            self.handle.print("\n");
            self.pendingl= 0;
        }
    }
    function vprint(var args)
    {
        for (var s in args)
            self.handle.print(s);
    }
    function print(var args [slurpy])
    {
        self.updateannot();
        self.vprint(args);
    }
    function say(var args [slurpy])
    {
        self.updateannot();
        self.vprint(args);
        self.handle.print("\n");
    }
    function annotate(var t)
    {
        if (self.file != t.file) {
            self.file= t.file;
            self.pendingf= 1;
            self.line= 0;
        }
        if (self.line != t.line) {
            self.line= t.line;
            self.pendingl= 1;
        }
    }
    function comment(string s)
    {
        self.handle.print('# ' + s + "\n");
    }
}

//*********************************************
//       Auxiliary classes and functions
//*********************************************

function SyntaxError(string msg, var pos)
{
   string sline= pos.line;
   string file= pos.file;
   string m= msg + ' in '+ file + ' line ' + sline;
   var ex= Error(m, 2, 555);
   return ex;
}

class Item
{
    function isNamespace() { return 0; }
    function isClass() { return 0; }
}

function parseStatement(tk, owner)
{
    var t= tk.get();
    if (t.isop('{')) {
        var c = new CompoundStatement;
        c.parse(tk, owner);
        return c;
    }
    else if (t.iskeyword('int')) {
        var c = new IntStatement;
        c.parse(tk, owner);
        return c;
    }
    else if (t.iskeyword('goto')) {
        var c = new GotoStatement;
        c.parse(tk, owner);
        return c;
    }
    else if (t.iskeyword('print')) {
        var c= new PrintStatement;
        tk.unget(t);
        c.parse(tk, owner);
        return c;
    }
    else if (t.isidentifier()) {
        var t2= tk.get();
        if (t2.isop(':')) {
            var c= new LabelStatement;
            c.set(owner, t);
            return c;
        }
        tk.unget(t2);
    }
    return null;
}

//*********************************************
//            Statement
//*********************************************

class Statement : Item
{
    var start;
    var owner;
    function annotate(e)
    {
        e.annotate(self.start);
    }
    function tempreg(string type)
    {
        return self.owner.tempreg(type);
    }
    function freetemps()
    {
        self.owner.freetemps();
    }
    function genlabel()
    {
        return self.owner.genlabel();
    }
    function getlabel(name)
    {
        return self.owner.getlabel(name);
    }
    function createlabel(name)
    {
        return self.owner.createlabel(name);
    }
}

//*********************************************
//            Expr
//*********************************************

class Expr
{
    function issimple() { return 0; }
}

class SimpleExpr : Expr
{
    function issimple() { return 1; }
}

class StringLiteral : SimpleExpr
{
    var strval;
    function checkResult() { return 'S'; }
    function getPirString() { return self.strval; }
}

class IntegerLiteral : SimpleExpr
{
    var numval;
    function checkResult() { return 'I'; }
    function getIntegerValue()
    {
        string aux= self.numval;
        int i= aux;
        return i;
    }
}

class IdentifierExpr : SimpleExpr
{
    var name;
    function checkResult() { return ''; }
    function getIdentifier()
    {
        string s= self.name.str;
        return s;
    }
}

class OpAddExpr : Expr
{
    var start;
    var owner;
    var eleft;
    var eright;
    function checkResult() { return 'I'; }
    function emit(e, result)
    {
        string rleft;
        string rright;
        int nleft;
        int nright;
        if (! self.eleft.issimple()) {
            string rleft= self.owner.tempreg('I');
            self.eleft.emit(e, rleft);
        }
        else {
            nleft= self.eleft.getIntegerValue();
            rleft= nleft;
        }
        if (! self.eright.issimple()) {
            string rright= self.owner.tempreg('I');
            self.eright.emit(e, rright);
        }
        else {
            nright= self.eright.getIntegerValue();
            rright= nright;
        }
        e.say('add ', result, ', ', rleft, ', ', rright);
    }
}

class OpMulExpr : Expr
{
    var start;
    var owner;
    var eleft;
    var eright;
    function checkResult() { return 'I'; }
    function emit(e, result)
    {
        string rleft;
        string rright;
        int nleft;
        int nright;
        if (! self.eleft.issimple()) {
            string rleft= self.owner.tempreg('I');
            self.eleft.emit(e, rleft);
        }
        else {
            nleft= self.eleft.getIntegerValue();
            rleft= nleft;
        }
        if (! self.eright.issimple()) {
            string rright= self.owner.tempreg('I');
            self.eright.emit(e, rright);
        }
        else {
            nright= self.eright.getIntegerValue();
            rright= nright;
        }
        e.say('mul ', result, ', ', rleft, ', ', rright);
    }
}

function parseExpr_0(tk, owner)
{
    var t= tk.get();
    var expr;
    if (t.isstring()) {
        expr= new StringLiteral;
        expr.strval= t;
        return expr;
    }
    if (t.isint()) {
        expr= new IntegerLiteral;
        expr.numval= t;
        return expr;
    }
    if (t.isidentifier()) {
        expr= new IdentifierExpr;
        expr.name= t;
        return expr;
    }
    throw SyntaxError('Lots of things unsupported', t);
}

function parseExpr_5(tk, owner)
{
    var eleft= parseExpr_0(tk, owner);
    var t;
    while ((t= tk.get()).isop('*')) {
        var eright= parseExpr_0(tk, owner);
        var expr= new OpMulExpr;
        expr.start= t;
        expr.owner= owner;
        expr.eleft= eleft;
        expr.eright= eright;
        eleft= expr;
    }
    tk.unget(t);
    return eleft;
}

function parseExpr_6(tk, owner)
{
    var eleft= parseExpr_5(tk, owner);
    var t;
    while ((t= tk.get()).isop('+')) {
        var eright= parseExpr_5(tk, owner);
        var expr= new OpAddExpr;
        expr.start= t;
        expr.owner= owner;
        expr.eleft= eleft;
        expr.eright= eright;
        eleft= expr;
    }
    tk.unget(t);
    return eleft;
}

function parseExpr(tk, owner)
{
    return parseExpr_6(tk, owner);
}

//*********************************************
//            PrintStatement
//*********************************************

// This is a temporal way to be enable generation
// of some working and viewable code.

class PrintStatement : Statement
{
    var items;
    function parse(tk, owner)
    {
        self.owner= owner;
        self.items= [];
        self.start= tk.get();
        var t= tk.get();
        if (! t.isop('('))
            throw SyntaxError("Expected '('", t);
        t= tk.get();
        if (! t.isop(')')) {
            tk.unget(t);
            do {
                var exp= parseExpr(tk, self);
                self.items.push(exp);
            } while ((t= tk.get()).isop(','));
            if (! t.isop(')'))
                throw SyntaxError("Expected ')'", t);
        }
        t= tk.get();
        if (! t.isop(';'))
            throw SyntaxError("Expected ';'", t);
    }
    function emit(e)
    {
        for (var item in self.items) {
            var expr= item;
            if (expr.issimple()) {
                self.annotate(e);
                switch (expr.checkResult()) {
                case 'S':
                    string s= expr.getPirString();
                    e.say("print ", s);
                    break;
                case 'I':
                    int n= expr.getIntegerValue();
                    e.say("print ", n);
                    break;
                case '':
                    e.say("print ", expr.getIdentifier());
                    break;
                }
            }
            else {
                string result= self.tempreg('I');
                expr.emit(e, result);
                e.say("print ", result);
            }
        }
    }
}

//*********************************************
//            LabelStatement
//*********************************************

class LabelStatement : Statement
{
    var name;
    var value;
    function set(owner, n)
    {
            self.owner= owner;
        self.start= n;
        self.name= n;
        string value= self.owner.createlabel(n);
        self.value= value;
    }
    function emit(e)
    {
        self.annotate(e);
        e.say(self.value, ':');
    }
}

//*********************************************
//            GotoStatement
//*********************************************

class GotoStatement : Statement
{
    var label;
    function parse(tk, owner)
    {
            self.owner= owner;
        var t= tk.get();
        if (!t.isidentifier())
            throw SyntaxError('Identifier expected', t);
        self.start= t;
        string s= t;
        self.label= s;
        t= tk.get();
        if (!t.isop(';'))
            throw SyntaxError("Expected ';'", t);
    }
    function emit(e)
    {
        self.annotate(e);
        string value= self.getlabel(self.label);
        e.say('goto ', value);
    }
}

//*********************************************
//            IntStatement
//*********************************************

class IntStatement : Statement
{
    var name;
    function parse(tk, owner)
    {
        var t= tk.get();
        if (!t.isidentifier())
            throw SyntaxError('Identifier expected', t);
        self.name= t;
        t= tk.get();
        if (!t.isop(';'))
            throw SyntaxError("Expected ';'", t);
    }
    function emit(var e)
    {
        e.annotate(self.name);
        string name= self.name;
        e.say('.local int ', name);
    }
}

//*********************************************
//            CompoundStatement
//*********************************************

class CompoundStatement : Statement
{
    var statements;
    var end;
    var labels;

    function init [vtable] ()
    {
        self.labels= new 'Hash';
    }
    function getlabel(var name)
    {
        string s= name;
        var labels= self.labels;
        string exist= labels[s];
        if (exist == null || exist == '')
            throw SyntaxError('Label not defined', name);
        return exist;
    }
    function createlabel(var name)
    {
        string s= name;
        var labels= self.labels;
        string exist= labels[s];
        if (exist != null && exist != '')
            throw SyntaxError('Label already defined', name);
        string value= self.genlabel();
        labels[s]= value;
        return value;
    }

    function parse(tk, owner)
    {
        //say('<<{');
        self.owner= owner;
        self.statements= [];
        var t;
        while (! (t= tk.get()).isop('}')) {
            tk.unget(t);
            //say (t.line);
            var c = parseStatement(tk, self);
            if (c == null) {
                while (! ( (t = tk.get()).isop(';') || t.isop('}') ) ) {
                    //say('-- ', t);
                    if (t.isop('{')) {
                        var c= new CompoundStatement;
                        c.parse(tk, self);
                    }
                }
                if (t.isop('}')) break;
            }
            else
                self.statements.push(c);
        }
        //say('}', t.line);
        self.end= t;
    }
    function getend() { return self.end; }
    function report()
    {
    }
    function emit(var e)
    {
        e.comment('{');
        for (var st in self.statements) {
            st.emit(e);
            self.freetemps();
        }
        e.comment('}');
    }
}

//*********************************************
//            FunctionStatement
//*********************************************

class FunctionStatement : Item
{
    var owner;
    var name;
    var modifiers;
    var body;
    var nreg;
    var tempI;
    var freeI;
    var nlabel;

    function init [vtable]()
    {
        self.tempI= new 'ResizableStringArray';
        self.freeI= new 'ResizableStringArray';
        self.nlabel= 0;
    }
    function createreg(string type)
    {
        if (self.nreg == null)
            self.nreg= new 'Integer';
        var n= self.nreg;
        string reg= n;
        n = n + 1;
        self.nreg = n;
        reg = '$' + type + reg;
        return reg;
    }
    function tempreg(string type)
    {
        int n;
        string reg;
        switch(type)
        {
        case 'I':
            n= self.freeI;
            if (n > 0) {
                reg= self.freeI.pop();
                return reg;
            }
            break;
        default:
            throw Error("Invalid register type " + type);
        }
        reg= self.createreg(type);
        self.tempI.push(reg);
        return reg;
    }
    function freetemps()
    {
        for (string s in self.tempI)
            self.freeI.unshift(s);
    }
    function genlabel()
    {
        var nlabel = self.nlabel;
        int n= nlabel;
        string s= '__label_' + n++;
        nlabel =: n;
        return s;
    }

    function parse(tk, owner)
    {
        self.owner= owner;
        var t= tk.get();
        self.name= t;
        t= tk.get();
        if (t.isop('['))
        {
            var modifiers= [];
            t= tk.get();
            modifiers.push(t);
            for (t= tk.get(); t.isop(','); )
            {
                t= tk.get();
                modifiers.push(t);
            }
            if (!t.isop(']'))
                throw Error("Expected ',' or ']'");
            t= tk.get();
            self.modifiers= modifiers;
        }
        if (! t.isop('('))
            throw Error("Expected '('");
        t= tk.get();
        while (! t.isop(')'))
            t= tk.get();

        t= tk.get();
        if (!t.isop('{'))
            throw Error("Expected '{'");
        self.body= new CompoundStatement;
        self.body.parse(tk, self);
    }

    function report()
    {
        print('function ', self.name);
        var modifiers= self.modifiers;
        if (modifiers)
        {
            print(' [');
            var m;
            string sep= '';
            for (m in modifiers)
            {
                print(sep);
                sep= ', ';
                print(m);
            }
            print(']');
        }
        say(' ()');
    }
    function emit(var e)
    {
        e.print('.sub ', self.name);
        if (self.owner.isClass())
            e.print(' :method');
        var modifiers= self.modifiers;
        if (modifiers) {
            for (var m in modifiers)
                e.print(' :', m);
        }
        e.say();
        e.annotate(self.name);

        e.comment('Body');
        self.body.emit(e);

        e.annotate(self.body.getend());
        e.say('.end');
    }
}

//*********************************************
//            ClassStatement
//*********************************************

class ClassStatement : Item
{
    var parent;
    var name;
    var bases;
    var functions;

    function isClass() { return 1; }
    function init [vtable] ()
    {
        self.functions = [];
        self.bases= [];
    }

    function parse(tk, parent)
    {
        self.parent= parent;
        var t= tk.get();
        self.name= t;
        t= tk.get();
        if (t.isop(':')) {
            var bases= self.bases;
            for (;;) {
                t= tk.get();
                bases.push(t);
                t= tk.get();
                if (!t.isop(',')) break;
            }
        }
        if (!t.isop('{'))
            throw Error("Expected '{'");
        t= tk.get();
        while (!t.isop('}'))
        {
            if (t.iskeyword('function'))
            {
                var f= new FunctionStatement;
                f.parse(tk, self);
                var functions= self.functions;
                functions.push(f);
            }
            t= tk.get();
        }
    }

    function report()
    {
        print('class ', self.name);
        string sep= ' : ';
        for (var b in self.bases) {
            print (sep, b);
            sep= ' ,';
        }
        say(' {');
        for (var f in self.functions)
            f.report();
        say('}');
    }
    function emit(var e)
    {
        var classns= self.parent.getpath();
        classns.push(self.name);
        say(namespacekey(classns));
        for (var f in self.functions)
            f.emit(e);
    }
}

//*********************************************
//            Namespace
//*********************************************

class Namespace : Item
{
    var parent;
    var name;
    var namespaces;
    var classes;
    var functions;
    var items;

    function isNamespace() { return 1; }
    function init [vtable] ()
    {
        self.namespaces= [];
        self.classes= [];
        self.functions = [];
        self.items = [];
    }
    function init_child(parent, string name)
    {
        self.parent= parent;
        self.name= name;
    }
    function getpath()
    {
        if (self.parent != null) {
            var path=self.parent.getpath();
            path.push(self.name);
            return path;
        }
        else
        {
            string path[];
            return path;
        }
    }
    function parse(tk)
    {
        string namespace[];
        int balance1= 0;
        int balance2= 0;
        int balance3= 0;
        var t;
        while (t= tk.get())
        {
            if (t.iskeyword('namespace'))
            {
                t= tk.get();
                string name= t;
                namespace.push(name);
                t= tk.get();
                if (!t.isop('{'))
                    throw Error("Expected '{'");
                var child= new Namespace;
                child.init_child(self, name);
                self.namespaces.push(child);
                self.items.push(child);
                child.parse(tk);
            }
            else if (t.iskeyword('function'))
            {
                var f= new FunctionStatement;
                f.parse(tk, self);
                var functions= self.functions;
                functions.push(f);
                self.items.push(f);
            }
            else if (t.iskeyword('class'))
            {
                var c= new ClassStatement;
                c.parse(tk, self);
                var classes= self.classes;
                classes.push(c);
                self.items.push(c);
            }
            else if (t.isop('}'))
            {
                int n= namespace;
                if (n < 1)
                {
                    if (self.parent != null) return;
                    string line= t.line;
                    throw Error('Unclosed namespace in ' + line);
                }
                namespace.pop();
            }
        }
    }
    function report()
    {
        if (self.parent != null)
            say('namespace ', self.name, ' {');
        for (var n in self.namespaces)
            n.report();
        for (var c in self.classes)
            c.report();
        for (var f in self.functions)
            f.report();
        if (self.parent != null)
            say('} // namespace ', self.name);
    }
    function emit(var e)
    {
        var path= self.getpath();
        string s= namespacekey(path);

        int activate= 1;
        for (var item in self.items) {
            if (item.isNamespace() || item.isClass())
                activate= 1;
            else
                if (activate) {
                    e.say(s);
                    activate= 0;
                }
            item.emit(e);
        }
    }
}

//*********************************************
//            MiniWinxed
//*********************************************

class MiniWinxed
{
    var rootns;
    function init [vtable] ()
    {
        self.rootns= new Namespace;
    }
    function parse(tk)
    {
        self.rootns.parse(tk);
    }
    function report()
    {
        self.rootns.report();
    }
    function emit(var e)
    {
        self.rootns.emit(e);
    }
}

function miniwinxed_parser(tk, int gen)
{
        var winxed= new MiniWinxed;
        winxed.parse(tk);
        if (gen) {
            var handle= getinterp().stdhandle(1);
            var emit= new Emit;
            emit.initialize(handle);
            winxed.emit(emit);
        }
        else
            winxed.report();
}

//*********************************************
//            Main functions
//*********************************************

function parser(argv)
{
    // Simple example, get tokens and prints them.

    using extern Getopt.Obj;
    var getopts = new 'Getopt::Obj';
    getopts.notOptStop(1);
    getopts.push_string('withcomments');
    getopts.push_string('miniwinxed');
    getopts.push_string('miniwinxedgen');

    argv.shift();
    var opts = getopts.get_options(argv);
    var withcomments= opts['withcomments'];
    var miniwinxed = opts['miniwinxed'];
    var miniwinxedgen = opts['miniwinxedgen'];

    int argc= argv;
    if (argc == 0)
        throw Error('No file');
    string filename= argv[0];
    var file= new 'FileHandle';
    file.open(filename); // Must throw on error

    var t= new Tokenizer;
    t.init(file, filename);

    if (miniwinxed)
        miniwinxed_parser(t, 0);
    else if (miniwinxedgen)
        miniwinxed_parser(t, 1);    
    else
    {
        var c;
        int line= 0;
        while (c= t.get(withcomments))
        {
            int newline= c.line;
            if (newline != line)
            {
                line= newline;
                say(); print(line, ': ');
            }
            print(" [", c, "]");
        }
        say('');
    }

    file.close();
}

function main(argv)
{
    try parser(argv);
    catch (e)
    {
        string msg= e['message'];
        say('Error: ', msg);
        var bt= e.backtrace();
        int i= 1;
        for (var t in bt) {
            var sub= t['sub'];
            if (sub != null) {
                string subname= sub;
                string ns= sub.get_namespace();
                if (ns != '' && ns != 'parrot') subname= ns + '.' + subname;
            }
            var ann= t['annotations'];
            string file= ann['file'];
            if (file != '') {
                int line= ann['line'];
                say(' ' * (2 * i++), "at ", subname, " in '", file, "' line ", line);
            }
        }
    }
}

// End
