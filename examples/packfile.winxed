#! winxed

# Show the content of a pbc file using the Packfile PMCs.
# Work in progress.

// Segment types (from packfile_segments.pasm)
const int PF_DIR_SEG         = 0;
const int PF_UNKNOWN_SEG     = 1;
const int PF_FIXUP_SEG       = 2;
const int PF_CONST_SEG       = 3;
const int PF_BYTEC_SEG       = 4;
const int PF_DEBUG_SEG       = 5;
const int PF_ANNOTATIONS_SEG = 6;

// Constant types (from packfile_constants.pasm)
const int PFC_NONE =   0x00;
const int PFC_NUMBER = 0x6E;
const int PFC_STRING = 0x73;
const int PFC_PMC =    0x70;
const int PFC_KEY =    0x6B;

// Opcode arg types (from include/parrot/enums.h)
const int PARROT_ARG_TYPE_MASK = 0x000F;
const int PARROT_ARG_CONSTANT  = 0x0010;

function dump_constants(var seg)
{
    int n = elements(seg);
    float numval;
    say("Constant table:\n\tLength: ", n);
    for (int i= 0; i < n; ++i) {
        int type = seg.get_type(i);
        string typename;
        string value = '';
        switch (type) {
        case PFC_KEY:
            typename = 'KEY';
            break;
        case PFC_NUMBER:
            typename = 'NUMBER';
            numval = seg[i];
            value = numval;
            break;
        case PFC_PMC:
            typename = 'PMC';
            break;
        case PFC_STRING:
            typename = 'STRING';
            value = seg[i];
            value = '"' + value + '"';
            break;
        default:
            typename = 'INVALID CONSTANT TYPE';
        }
        say("\t", i, ': ', typename, '(', type, '): ', value);
    }
}

function dump_fixup(var seg, var const_table)
{
    int n = elements(seg);
    float numval;
    say("Fixup table:\n\tLength: ", n);
    for (int i= 0; i < n; ++i) {
        var entry = seg[i];
        int type = entry.get_type();
        int index = entry;
        var pmcsub = const_table[index];
        int offset = pmcsub.start_offs();
        say("\tLabel: '", entry, "' type: ", type,
            " Sub: ", pmcsub.get_namespace(), ';', pmcsub,
            " Offset: ", offset);
    }
}

function dump_annotations(var seg)
{
    int n = elements(seg);
    float numval;
    say("Annotations:\n\tLength: ", n);
    for (int i= 0; i < n; ++i) {
        var annot = seg[i];
        int offset = annot.get_offset();
        string name = annot.get_name();
        print("\tOffset: ", offset, ' type: "', name, '" value: ');
        switch (name) {
        case 'file':
            string filename = annot;
            print("'", filename, "'");
            break;
        case 'line':
            int line = annot;
            print(line);
            break;
        }
        say();
    }
}

function getargs(var opcode)
{
    int count = opcode.op_count();
    string opcodestr = opcode;
    var chunks = split('_', opcodestr);
    int n = chunks;
    while (n > count) {
        chunks.shift();
        --n;
    }
    chunks.shift();
    return chunks;
}

function showarg(string type, int value, var const_table)
{
    int isconst = length(type) > 1 && substr(type, 1, 1) == 'c';
    if (isconst) {
        switch(substr(type, 0, 1)) {
        case 'i':
            print(value);
            break;
        case 'n':
            float fval = const_table[value];
            print(fval);
            break;
        case 's':
            string sval = const_table[value];
            print("'", sval, "'");
            break;
        case 'p':
            print("PC", value);
            break;
        case 'k':
            print("KC", value);
            break;
        default:
            print('???');
            break;
        }
    }
    else {
        string regtype;
        switch(substr(type, 0, 1)) {
        case 'i': regtype = 'I'; break;
        case 'n': regtype = 'N'; break;
        case 's': regtype = 'S'; break;
        case 'p': regtype = 'P'; break;
        default:  regtype = '???'; break;
        }
        print(regtype, value);
    }
}

function dump_bytecode(var seg, var const_table)
{
    int n = elements(seg);
    say("Bytecode:\n\tLength: ", n);
    var oplib = new 'OpLib';
    for (int i= 0; i < n; ++i) {
        print("\t", i, ': ');
        int code = seg[i];
        print(code, " - ");
        var opcode = oplib[code & 0xFFFF];
        var args = getargs(opcode);
        string opstr = opcode;
        print(opstr);

        // Special opcodes
        if (opstr == 'set_args_pc' || opstr == 'set_returns_pc' ||
                opstr == 'get_results_pc' || opstr == 'get_params_pc')
        {
            ++i;
            int sigindex = seg[i];
            var sig = const_table[sigindex];
            int siglen = sig;
            print(' PC', sigindex, '{', siglen, '}');
            string sep = ' ';
            for (int a = 0; a < siglen; ++a) {
                ++i;
                int sigvalue = sig[a];
                int sigtype = sigvalue & PARROT_ARG_TYPE_MASK;
                string type = substr('ispn', sigtype, 1);
                if (sigvalue & PARROT_ARG_CONSTANT)
                    type += 'c';
                int value = seg[i];
                print(sep);
                sep = ', ';
                showarg(type, value, const_table);
            }
        }
        else { // Not so special
            string sep = ' ';
            for (string arg in args) {
                ++i;
                print(sep);
                sep = ', ';
                int value = seg[i];
                showarg(arg, value, const_table);
            }
        }
        say();
    }
}

function main(argv)
{
    var file = new 'FileHandle'.open(argv[1], 'rb');
    string content= file.readall();
    file.close();

    var pack= new 'Packfile';
    pack =: content;
    say('Header:');
    for (string key in [
            'wordsize',
            'byteorder',
            'fptype',
            'version_major',
            'version_minor',
            'version_patch',
            'bytecode_major',
            'bytecode_minor',
            'uuid_type'
            ] ) {
        int n= pack[key];
        say("\t", key, ': ', n);
    }
    say('Directory:');
    var dir= pack.get_directory();
    var const_table = null;
    for (var it in dir) {
        print("\tSegment: ", it, ' type ');
        var seg = it.value();
        int type = seg.type();
        switch (type)
        {
        case PF_FIXUP_SEG:       print("FIXUP"); break;
        case PF_CONST_SEG:       print("CONST");
            const_table = seg;
            break;
        case PF_BYTEC_SEG:       print("BYTEC"); break;
        case PF_DEBUG_SEG:       print("DEBUG"); break;
        case PF_ANNOTATIONS_SEG: print("ANNOTATIONS"); break;
        default:                 print("Unknown");
        }
        say(' (', type, ')');
    }
    for (var it in dir) {
        var seg = it.value();
        int type = seg.type();
        switch (type)
        {
        case PF_CONST_SEG:
            dump_constants(seg);
            break;
        case PF_FIXUP_SEG:
            dump_fixup(seg, const_table);
            break;
        case PF_ANNOTATIONS_SEG:
            dump_annotations(seg);
            break;
        case PF_BYTEC_SEG:
            dump_bytecode(seg, const_table);
            break;
        default:
            break;
        }
    }
}

// That's all folks!
