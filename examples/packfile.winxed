#! winxed

# Show the content of a pbc file using the Packfile PMCs.
# Work in progress.

//**********************************************************************

class Writer
{
    var handle;

    function set(var handle)
    {
        self.handle = handle;
        return self;
    }
    function print(var args[slurpy])
    {
        for (var arg in args)
            self.handle.print(arg);
    }
    function say(var args[slurpy])
    {
        for (var arg in args)
            self.handle.print(arg);
        self.handle.print("\n");
    }
}

//**********************************************************************

// Segment types (from packfile_segments.pasm)
const int PF_DIR_SEG         = 0;
const int PF_UNKNOWN_SEG     = 1;
const int PF_FIXUP_SEG       = 2;
const int PF_CONST_SEG       = 3;
const int PF_BYTEC_SEG       = 4;
const int PF_DEBUG_SEG       = 5;
const int PF_ANNOTATIONS_SEG = 6;

// Constant types (from packfile_constants.pasm)
const int PFC_NONE =   0x00;
const int PFC_NUMBER = 0x6E;
const int PFC_STRING = 0x73;
const int PFC_PMC =    0x70;
const int PFC_KEY =    0x6B;

// Opcode arg types (from include/parrot/enums.h and include/parrot/op.h)
const int PARROT_ARG_INTVAL    = 0x0000;
const int PARROT_ARG_STRING    = 0x0001;
const int PARROT_ARG_PMC       = 0x0002;
const int PARROT_ARG_FLOATVAL  = 0x0003;
const int PARROT_ARG_TYPE_MASK = 0x000F;
const int PARROT_ARG_CONSTANT  = 0x0010;
const int PARROT_ARG_KEYED     = 0x0020;

//**********************************************************************

function showarg(var out, int type, int value, var const_table)
{
    const string regtypename = 'ISPN';
    if (type & PARROT_ARG_CONSTANT) {
        switch(type & PARROT_ARG_TYPE_MASK) {
        case PARROT_ARG_INTVAL:
            out.print(value);
            break;
        case PARROT_ARG_STRING:
            string sval = const_table[value];
            out.print("'", sval, "'");
            break;
        case PARROT_ARG_PMC:
            if (type & PARROT_ARG_KEYED)
                out.print("KC", value);
            else
                out.print("PC", value);
            break;
        case PARROT_ARG_FLOATVAL:
            float fval = const_table[value];
            out.print(fval);
            break;
        default:
            out.print('???');
        }
    }
    else {
        string typechar = substr(regtypename, type & PARROT_ARG_TYPE_MASK, 1);
        out.print(typechar, value);
    }
}

//**********************************************************************

class Pbcfile
{
    var packfile;
    var fixup;
    var const_table;
    var bytecode;
    var debug;
    var annotations;

    function readfile(string filename)
    {
        var file = new 'FileHandle'.open(filename, 'rb');
        string content= file.readall();
        file.close();
        
        var packfile = new 'Packfile';
        packfile =: content;

        var dir = packfile.get_directory();
        var fixup = null;
        var const_table = null;
        var bytecode = null;
        var debug = null;
        var annotations = null;

        for (var it in dir) {
            var seg = it.value();
            int type = seg.type();
            switch (type)
            {
            case PF_FIXUP_SEG:
                fixup = seg;
                break;
            case PF_CONST_SEG:
                const_table = seg;
                break;
            case PF_BYTEC_SEG:
                bytecode = seg;
                break;
            case PF_DEBUG_SEG:
                debug = seg;
                break;
            case PF_ANNOTATIONS_SEG:
                annotations = seg;
                break;
            }
        }

        self.packfile = packfile;
        self.fixup = fixup;
        self.const_table = const_table;
        self.bytecode = bytecode;
        self.debug = debug;
        self.annotations = annotations;
        return self;
    }
    function printheader(var out)
    {
        out.say('Header:');
        for (string key in [
                'wordsize',
                'byteorder',
                'fptype',
                'version_major',
                'version_minor',
                'version_patch',
                'bytecode_major',
                'bytecode_minor',
                'uuid_type'
                ] ) {
            int n= self.packfile[key];
            out.say("\t", key, ': ', n);
        }
    }
    function printdirectory(var out)
    {
        out.say('Directory:');
        var dir= self.packfile.get_directory();
        for (var it in dir) {
            out.print("\tSegment: ", it, ' type ');
            var seg = it.value();
            int type = seg.type();
            switch (type)
            {
            case PF_FIXUP_SEG:       out.print("FIXUP"); break;
            case PF_CONST_SEG:       out.print("CONST"); break;
            case PF_BYTEC_SEG:       out.print("BYTEC"); break;
            case PF_DEBUG_SEG:       out.print("DEBUG"); break;
            case PF_ANNOTATIONS_SEG: out.print("ANNOTATIONS"); break;
            default:                 out.print("Unknown");
            }
            out.say(' (', type, ')');
        }
    }
    function dump_constants(var out)
    {
        var seg = self.const_table;
        int n = elements(seg);
        float numval;
        out.say("Constant table:\n\tLength: ", n);
        for (int i= 0; i < n; ++i) {
            int type = seg.get_type(i);
            string typename;
            string value = '';
            switch (type) {
            case PFC_KEY:
                typename = 'KEY';
                break;
            case PFC_NUMBER:
                typename = 'NUMBER';
                numval = seg[i];
                value = numval;
                break;
            case PFC_PMC:
                typename = 'PMC';
                break;
            case PFC_STRING:
                typename = 'STRING';
                value = seg[i];
                value = '"' + value + '"';
                break;
            default:
                typename = 'INVALID CONSTANT TYPE';
            }
            out.say("\t", i, ': ', typename, '(', type, '): ', value);
        }
    }
    function dump_fixup(var out)
    {
        var seg = self.fixup;
        var const_table = self.const_table;
        int n = elements(seg);
        float numval;
        out.say("Fixup table:\n\tLength: ", n);
        for (int i= 0; i < n; ++i) {
            var entry = seg[i];
            int type = entry.get_type();
            out.say("\tLabel: '", entry, "' type: ", type);

            int index = entry;
            var pmcsub = const_table[index];
            int offset = pmcsub.start_offs();
            string fullname;
            var ns = pmcsub.get_namespace();
            if (ns != null) {
                var nsname = ns.get_name();
                fullname = nsname;
                fullname += ' ';
            }
            fullname += pmcsub;
            out.say("\t\tSub: ", fullname);

            string subid = pmcsub.get_subid();
            if (subid != null && subid != '')
                out.say("\t\tID: ", subid);
            out.say("\t\tOffset: ", offset);
        }
    }
    function get_fixups_hash()
    {
        var seg = self.fixup;
        var const_table = self.const_table;
        var fixups = {};
        int n = elements(seg);
        for (int i= 0; i < n; ++i) {
            var entry = seg[i];
            int index = entry;
            var pmcsub = const_table[index];
            int offset = pmcsub.start_offs();
            string fullname = pmcsub;
            var ns = pmcsub.get_namespace();
            while (ns != null) {
                string nsname = ns;
                if (nsname == '')
                    break;
                fullname = nsname + ';' + fullname;
                ns = ns.get_parent();
            }
            fixups[offset] = fullname;
        }
        return fixups;
    }
    function dump_annotations(var out)
    {
        var seg = self.annotations;
        if (seg == null)
            return;
        int n = elements(seg);
        float numval;
        out.say("Annotations:\n\tLength: ", n);
        for (int i= 0; i < n; ++i) {
            var annot = seg[i];
            int offset = annot.get_offset();
            string name = annot.get_name();
            out.print("\tOffset: ", offset, ' type: "', name, '" value: ');
            switch (name) {
            case 'file':
                string filename = annot;
                out.print("'", filename, "'");
                break;
            case 'line':
                int line = annot;
                out.print(line);
                break;
            }
            out.say();
        }
    }
    function dump_debug(var out)
    {
        var seg = self.debug;
        if (seg == null)
            return;
        int n = elements(seg);
        out.say("Debug:\n\tLength: ", n);
    }
    function dump_bytecode(var out)
    {
        var seg = self.bytecode;
        int n = elements(seg);
        out.print("Bytecode:\n\tLength: ", n);
        for (int offset= 0; offset < n; ++offset) {
            if ((offset % 8) == 0)
                out.print("\n\t", offset, ":");
            int code = seg[offset];
            out.print(" ", code);
        }
        out.say();
    }
    function disassemble(var out)
    {
        var seg = self.bytecode;
        int n = elements(seg);
        var oplib = new 'OpLib';
        var const_table = self.const_table;
        var fixups = self.get_fixups_hash();
        for (int offset= 0; offset < n; ++offset) {
            var label = fixups[offset];
            if (label != null)
                out.say('.sub ', label);
            // Offset in hexa
            string off = offset.get_as_base(16);
            off = '00000000' + off;
            off = substr(off, length(off) - 8);
            out.print("\t", off, ': ');

            int code = seg[offset];
            out.print(code, " - ");
            var opcode = oplib[code];
            int nargs = elements(opcode);
            string opstr = opcode;
            out.print(opstr);

            // Special opcodes
            if (opstr == 'set_args_pc' || opstr == 'set_returns_pc' ||
                    opstr == 'get_results_pc' || opstr == 'get_params_pc')
            {
                ++offset;
                int sigindex = seg[offset];
                var sig = const_table[sigindex];
                int siglen = sig;
                out.print(' PC', sigindex, '{', siglen, '}');
                string sep = ' ';
                for (int a = 0; a < siglen; ++a) {
                    ++offset;
                    int sigvalue = sig[a];
                    int value = seg[offset];
                    out.print(sep);
                    sep = ', ';
                    showarg(out, sigvalue, value, const_table);
                }
            }
            else { // Not so special
                string sep = ' ';
                for (int arg = 0; arg < nargs; ++arg) {
                    ++offset;
                    out.print(sep);
                    sep = ', ';
                    int value = seg[offset];
                    int type = opcode[arg];
                    showarg(out, type, value, const_table);
                }
            }
            out.say();
        }
    }
    function dump_all(var out)
    {
        self.printheader(out);
        self.printdirectory(out);
        self.dump_constants(out);
        self.dump_fixup(out);
        self.dump_annotations(out);
        self.dump_debug(out);
        self.dump_bytecode(out);
    }
}

//**********************************************************************

function main(argv)
{
    using extern Getopt.Obj;
    var getopts = new Getopt.Obj();
    getopts.notOptStop(1);
    getopts.push_string('d');
    argv.shift();
    var opts = getopts.get_options(argv);

    var pbcfile = new Pbcfile().readfile(argv[0]);
    var out = new Writer().set(getinterp().stdhandle(1));

    if (opts['d'] != null)
        pbcfile.disassemble(out);
    else
        pbcfile.dump_all(out);

}

// That's all folks!
