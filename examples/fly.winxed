#! winxed
// fly.winxed
// Open your eyes and spread your wings.

//**********************************************************************

const float PI = 3.1415926;
const float ToRad = PI / 180.0;

$include_const 'opengl_defines.pasm';

//**********************************************************************

class OpenGlCallback
{
    var w; // The window this callback refers

    function does[vtable](string doname)
    {
        return doname == 'invokable';
    }
    function set(var w)
    {
        self.w = w;
    }
}

class Reshape : OpenGlCallback
{
    function invoke[vtable](int w, int h)
    {
        self.w.reshape(w, h);
    }
}

class Draw : OpenGlCallback
{
    function invoke[vtable]()
    {
        self.w.draw();
    }
}

class Idle : OpenGlCallback
{
    function invoke[vtable]()
    {
        self.w.idle();
    }
}

class Timer : OpenGlCallback
{
    function invoke[vtable](int value)
    {
        self.w.timer(value);
        glutTimerFunc(self, 40, 0);
    }
}

class Keyboard : OpenGlCallback
{
    function invoke[vtable](int key, int x, int y)
    {
        self.w.keyboard(key, x, y);
    }
}

class Special : OpenGlCallback
{
    function invoke[vtable](int key, int x, int y)
    {
        self.w.specialKey(key, x, y);
    }
}

//**********************************************************************

class Thing
{
    var r;
    var g;
    var b;
    var x;
    var z;
    var height;
    var width;
    function Thing(float r, float g, float b,
            float x, float z, float height, float width [optional])
    {
        self.r = r;
        self.g = g;
        self.b = b;
        self.x = x;
        self.z = z;
        self.height = height;
        if (width == 0.0)
            width = 1.0;
        self.width = width / 2.0;
    }
    function draw()
    {
        float r = self.r;
        float g = self.g;
        float b = self.b;
        float x = self.x;
        float z = self.z;
        float height = self.height;
        float width = self.width;
        float f;
        glPushMatrix();
        glColor3f(r, g, b);

        if (0) {
            glTranslatef(x, height / 2.0, x);
            glScalef(1.0, height, 1.0);
            glutSolidCube(1.0);
        }
        else {
            glTranslatef(x, 0.0, z);

            glBegin(GL_QUADS);

            glVertex3f( width, height,  width);
            glVertex3f( width, height, -width);
            glVertex3f(-width, height, -width);
            glVertex3f(-width, height,  width);

            f = 0.7;
            glColor3f(r * f, g * f, b * f);
            glVertex3f( width, 0.0,    -width);
            glVertex3f( width, height, -width);
            glVertex3f( width, height,  width);
            glVertex3f( width, 0.0,     width);

            f = 0.6;
            glColor3f(r * f, g * f, b * f);
            glVertex3f(-width, 0.0,     width);
            glVertex3f(-width, height,  width);
            glVertex3f(-width, height, -width);
            glVertex3f(-width, 0.0,    -width);

            f = 0.3;
            glColor3f(r * f, g * f, b * f);
            glVertex3f(-width, 0.0,    -width);
            glVertex3f(-width, height, -width);
            glVertex3f( width, height, -width);
            glVertex3f( width, 0.0,    -width);

            f = 0.4;
            glColor3f(r * f, g * f, b * f);
            glVertex3f( width, 0.0,     width);
            glVertex3f( width, height,  width);
            glVertex3f(-width, height,  width);
            glVertex3f(-width, 0.0,     width);

            glEnd();
        }

        glPopMatrix();
    }
}

//**********************************************************************

function train(float angle, float dis)
{
    glPushMatrix();

    float dismod = dis + 3.0 * sin(angle * 4.0) + 7.0 * sin(angle * 8.0);
    float xt = sin(angle) * dismod;
    float zt = cos(angle) * dismod;
    glTranslatef(xt, 0.0, zt);

    float angle1 = angle + 0.0001;
    float dismod1 = dis + 3.0 * sin(angle1 * 4.0) + 7.0 * sin(angle1 * 8.0);
    float xt1 = sin(angle1) * dismod1;
    float zt1 = cos(angle1) * dismod1;

    float angle2 = angle - 0.0001;
    float dismod2 = dis + 3.0 * sin(angle2 * 4.0) + 7.0 * sin(angle2 * 8.0);
    float xt2 = sin(angle2) * dismod2;
    float zt2 = cos(angle2) * dismod2;

    glRotatef((atan(xt1 - xt2, zt1 - zt2)) / ToRad + 90.0, 0.0, 1.0, 0.0);

    const float len = 5.0;
    const float height = 1.2;
    const float width = 0.8;
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_QUAD_STRIP);
    glVertex3f( len, height, -width / 2);
    glVertex3f(-len, height, -width / 2);
    glVertex3f( len, height,  width / 2);
    glVertex3f(-len, height,  width / 2);
    glEnd();

    glColor3f(0.7, 0.7, 0.0);
    glBegin(GL_QUAD_STRIP);
    glVertex3f( len, height,  width / 2);
    glVertex3f(-len, height,  width / 2);
    glVertex3f( len, 0.0,     width / 2);
    glVertex3f(-len, 0.0,     width / 2);
    glEnd();

    glBegin(GL_QUAD_STRIP);
    glVertex3f( len, 0.0,  width / 2);
    glVertex3f(-len, 0.0,  width / 2);
    glVertex3f( len, 0.0, -width / 2);
    glVertex3f(-len, 0.0, -width / 2);
    glEnd();

    glColor3f(0.8, 0.8, 0.0);
    glBegin(GL_QUAD_STRIP);
    glVertex3f( len, 0.0,    -width / 2);
    glVertex3f(-len, 0.0,    -width / 2);
    glVertex3f( len, height, -width / 2);
    glVertex3f(-len, height, -width / 2);
    glEnd();

    glColor3f(0.6, 0.6, 0.0);
    glBegin(GL_QUADS);
    glVertex3f( len, height, -width / 2);
    glVertex3f( len, height,  width / 2);
    glVertex3f( len, 0.0,     width / 2);
    glVertex3f( len, 0.0,     -width / 2);

    glColor3f(0.5, 0.5, 0.0);
    glVertex3f(-len, 0.0,    -width / 2);
    glVertex3f(-len, 0.0,     width / 2);
    glVertex3f(-len, height,  width / 2);
    glVertex3f(-len, height, -width / 2);

    glEnd();

    glPopMatrix();
}

function village(var things, int posi, int posj, float r, float g, float b)
{
    for (int i = 0; i < 11; ++i)
        for (int j = 0; j < 11; ++j)
            if (i != j && i != 10 - j)
                things.push(new Thing(r, g, b, float(i*2 + posi), float(j*2 + posj), 4.0));
}

class Fly
{
    var w;
    var aspect;
    var savecb;
    var things;

    var auto;

    var posx;
    var posy;
    var posz;

    var dx;
    var dy;
    var dz;

    var speed;
    var prev;

    function create(string title)
    {
        int w = glutCreateWindow(title);
        self.w = w;
        self.aspect = 1.0;

        self.auto = 1;

        self.posx =  60.0;
        self.posy =  10.0;
        self.posz = -10.0;

        self.dx  = -1.0;
        self.dy  =  0.0;
        self.dz  =  0.0;

        self.speed = 25.0;

        var things = [];
        things.push(new Thing(0.0, 0.8, 0.2, 4.0, 4.0, 1.0));
        things.push(new Thing(0.0, 1.0, 0.0, -1.0, -3.0, 1.0));
        things.push(new Thing(1.0, 0.2, 0.2, -2.0, -3.0, 10.0));
        things.push(new Thing(0.8, 1.0, 0.8, -2.0, 5.0, 1.0));
        things.push(new Thing(0.4, 1.0, 0.4, 3.0, 3.0, 12.0));

        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 9.0, 12.0));
        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 8.0, 11.0));
        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 7.0, 10.0));

        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -10.0, 14.0));
        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -11.0, 14.0));
        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -12.0, 14.0));

        things.push(new Thing(1.0, 1.0, 0.0, 20.0, 20.0, 30.0));

        things.push(new Thing(1.0, 0.0, 0.0, -120.0,  120.0, 20.0, 5.0));
        things.push(new Thing(0.0, 1.0, 0.0, -120.0, -120.0, 20.0, 5.0));
        things.push(new Thing(0.0, 0.0, 1.0,  120.0, -120.0, 20.0, 5.0));
        things.push(new Thing(1.0, 0.0, 1.0,  120.0,  120.0, 20.0, 5.0));

        village(things, -70, -80, 0.2, 1.0, 0.2);
        village(things,  90, 110, 1.0, 0.8, 0.4);
        village(things,  30, 150, 0.4, 0.4, 0.7);

        const float r = 1.0; const float g = 0.8; const float b = 0.7;
        const float dis = 178.9;
        const float pheight = 2.5;
        const float pwidth = 0.18;
        for (int i = 0;  i < 360; i+=8) {
            float angle = float(i) * ToRad;
            float dismod = dis + 3.0 * sin(angle * 4.0) + 7.0 * sin(angle * 8.0);
            float xi = dismod * sin(angle);
            float zi = dismod * cos(angle);
            things.push(new Thing(r, g, b, xi, zi, pheight, pwidth));
            dismod += 4.2;
            xi = dismod * sin(angle);
            zi = dismod * cos(angle);
            things.push(new Thing(r, g, b, xi, zi, pheight, pwidth));
        }

        self.things = things;

        float prev;
        ${ time prev };
        self.prev = prev;
        // Inititalize postion for automatic mode, draw can be called
        // before the first timer pulse.
        self.timer(0);

        var savecb = [];
        self.savecb = savecb;
        var d;
        d = new Keyboard(); d.set(self);
        savecb.push(d);
        glutKeyboardFunc(d);
        d = new Special(); d.set(self);
        savecb.push(d);
        glutSpecialFunc(d);
        d = new Reshape(); d.set(self);
        savecb.push(d);
        glutReshapeFunc(d);
        d = new Draw(); d.set(self);
        savecb.push(d);
        glutDisplayFunc(d);


        d = new Timer(); d.set(self);
        savecb.push(d);
        glutTimerFunc(d, 40, 0);
    }

    function reshape(int w, int h)
    {
        float aspect = w;
        aspect = aspect / h;
        self.aspect =: aspect;
        glViewport(0, 0, w, h);
    }

    function draw()
    {
        int buffers = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT;
        glClearColor(0.8, 0.9, 1.0, 1.0);
        glClear(buffers);

        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        gluPerspective(60.0, self.aspect, 0.1, 1000.0);

        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();

        float x = self.posx;
        float y = self.posy;
        float z = self.posz;
        float dx = self.dx;
        float dy = self.dy;
        float dz = self.dz;
        gluLookAt(
             x, y, z,
             x + dx, y + dy, z + dz,
             0.0, 1.0, 0.0);

        glPushMatrix();
        float length = 200.0;
        glColor3f(0.4, 0.4, 0.4);
        glBegin(GL_QUADS);
        glVertex3f( length,  0.0,  length);
        glVertex3f( length,  0.0, -length);
        glVertex3f(-length,  0.0, -length);
        glVertex3f(-length,  0.0,  length);
        glEnd();
        glPopMatrix();

        glDisable(GL_CULL_FACE);
        glColor3f(0.6, 0.6, 0.6);

        const float angle = -67.0 * ToRad;
        const float rangle = angle + 90.0 * ToRad;
        const float inix =  189.5;
        const float iniz =  -81.5;
        const int nsteps = 7;
        int steps[nsteps]     = [   3,   3,   3,   4,    3,    3,    3 ];
        float heights[nsteps] = [ 0.2, 0.4, 0.3, 0.0, -0.3, -0.4, -0.2 ];
        float stepx = sin(angle)  * 2.0;
        float stepz = cos(angle)  * 2.0;
        for (int r = 0; r < 2; ++r) {
            float xpos1 = inix + sin(rangle) * 5.5 * r;
            float zpos1 = iniz + cos(rangle) * 5.5 * r;
            float xpos2 = xpos1 + sin(rangle)  * 4.0;
            float zpos2 = zpos1 + cos(rangle) * 4.0;
            float ypos = 0.1;

            glBegin(GL_QUAD_STRIP);
            glVertex3f(xpos1, ypos, zpos1);
            glVertex3f(xpos2, ypos, zpos2);
            for (int s = 0; s < nsteps; ++s) {
                int ss = steps[s];
                float sx = stepx * ss;
                float sz = stepz * ss;
                float sy = heights[s] * ss;
                xpos1 += sx;
                xpos2 += sx;
                zpos1 += sz;
                zpos2 += sz;
                ypos += sy;
                glVertex3f(xpos1, ypos, zpos1);
                glVertex3f(xpos2, ypos, zpos2);
            }
            glEnd();
        }
        glEnable(GL_CULL_FACE);

        for (var thing in self.things)
            thing.draw();

        float now;
        ${ time now };
        float t = now / 7.2;
        int i;
        for (i = 0; i < 7; ++i) {
            train(t, 180.0);
            t += 0.058;
        }
        t = - now / 6.8;
        for (i = 0; i < 6; ++i) {
            train(t, 182.0);
            t -= 0.058;
        }

        glutSwapBuffers();
        ${ sweep 1 };
    }

    function timer(int ignored)
    {
        float x; float y; float z;
        float dx; float dy; float dz;
        float prev = self.prev;
        float now;
        float diff;
        ${ time now };
        float dis;
        switch (self.auto) {
          case 1:
            dis = 175.4;
            diff = (now - 1.2) / 7.2;
            x = sin(diff) * dis;
            z = cos(diff) * dis;
            y = 16.0 + 11.0 * cos(now / 8.5);
            dx = sin(diff + PI / 2.0);
            dy = 0;
            dz = cos(diff + PI / 2.0);
            self.dx =: dx;
            self.dy =: dy;
            self.dz =: dz;
            break;
          case 2:
            dis = 186.0;
            diff = - (now - 1.0) / 6.8;
            x = sin(diff) * dis;
            z = cos(diff) * dis;
            y = 16.0 + 11.0 * cos(now / 8.5);
            dx = sin(diff - PI / 2.0);
            dy = 0;
            dz = cos(diff - PI / 2.0);
            self.dx =: dx;
            self.dy =: dy;
            self.dz =: dz;
            break;
          default:
            x = self.posx;
            y = self.posy;
            z = self.posz;
            dx = self.dx;
            dy = self.dy;
            dz = self.dz;

            float speed = self.speed;
            diff = (now - prev) * speed;
            //cry(diff);

            x += dx * diff;
            y += dy * diff;
            z += dz * diff;
        }
        self.prev =: now;
        self.posx =: x;
        self.posy =: y;
        self.posz =: z;
        glutPostRedisplay();
    }

    function keyboard(int key, int x, int y)
    {
        float speed;
        switch (key) {
          case ord("\e"):
            glutTimerFunc(null, 40, 0);
            glutDestroyWindow(self.w);
            break;
          case ord("+"):
            speed = self.speed;
            speed = speed * 1.1;
            self.speed = speed;
            break;
          case ord("-"):
            speed = self.speed;
            speed = speed * 0.9;
            self.speed = speed;
            break;
          case ord("\t"):
            var auto = self.auto;
            switch (auto) {
              case 1:
                auto = 2; break;
              case 2:
                auto = 1; break;
            }
            self.auto =: auto;
            break;
        }
    }
    function specialKey(int key, int x, int y)
    {
        if (self.auto)
            self.auto =: 0;

        float dx = self.dx;
        float dy = self.dy;
        float dz = self.dz;
        float hang = atan(dx, dz);
        switch (key) {
          case GLUT_KEY_LEFT:
            hang += 0.02;
            self.dx =: sin(hang);
            self.dz =: cos(hang);
            break;
          case GLUT_KEY_RIGHT:
            hang -= 0.02;
            self.dx =: sin(hang);
            self.dz =: cos(hang);
            break;
          case GLUT_KEY_DOWN:
            hang = sin(dy);
            hang += 0.02;
            self.dy = hang;
            break;
          case GLUT_KEY_UP:
            hang = sin(dy);
            hang -= 0.02;
            self.dy = hang;
            break;
        }

        glutPostRedisplay();
    }
}

//**********************************************************************

function main(var argv)
{
    using extern OpenGL;
    using OpenGL._export_all_functions;
    _export_all_functions();
    using extern NCI.Utils;
    using NCI.Utils.call_toolkit_init;
    using OpenGL.glutInit;
    call_toolkit_init(glutInit, argv);

    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);

    var f = new Fly();
    f.create('Fly - winxed');

    glCullFace(GL_BACK);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
    glEnable(GL_MULTISAMPLE);

    glutMainLoop();
}

// End
