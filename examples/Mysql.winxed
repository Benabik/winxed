#! winxed

// Test Mysql usage via NCI

namespace WinxedMysql
{

function getlib__private()
{
    string libs[] = [
        'libmysqlclient',
        'libmysqlclient.so.16',
        'libmysqlclient.so.15'
    ];
    var l;
    for (string lib in libs) {
        l= loadlib(lib);
        if (l) break;
    }
    return l;
}

function getlib()
{
    var l= getlib__private();
    if (! l)
        throw Error('Cannot load Mysql lib');
    for (;;)
        yield l;
}

class Row
{
    var mrow;
    var nfields;
    function init(var myrow, int n)
    {
        self.mrow= myrow;
        self.nfields= n;
    }
    function get(int i)
    {
        var myrow= self.mrow;
        string s= myrow[i];
        return s;
    }
}

class Result
{
    var mysql;
    var myresult;
    var nfields;
    var desc;
    function init(var my, var r)
    {
        using WinxedMysql.getlib;
        self.mysql= my;
        self.myresult= r;
        var f= dlfunc(getlib(), 'mysql_field_count', 'ip');
        int count= f(my);
        self.nfields= count;
        int desc [3 * count];
        int i;
        // Store the fields description for use in fetchs.
        for (i= 0; i < count; ++i) {
            desc[i * 3]    = -70;
            desc[i * 3 + 1]= 1;
            desc[i * 3 + 2]= 0;
        }
        self.desc= desc;
    }
    function field_count()
    {
        return self.nfields;
    }
    function fetch_row()
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_fetch_row', 'pp');
        var frow= f(self.myresult);
        var row;

        if(frow == null) return row;
        var none = new 'UnManagedStruct';
        if (frow == none) return row;

        var desc= self.desc;
        frow =: desc;
        row= new WinxedMysql.Row;
        row.init(frow, self.nfields);
        return row;
    }
}

class Connection
{
    var mysql;
    function init [vtable]()
    {
        using WinxedMysql.getlib;
        var minit= dlfunc(getlib(), 'mysql_init', 'pt');
        string nothing;
        var my= minit(nothing);
        self.mysql= my;
    }
    function close()
    {
        using WinxedMysql.getlib;
        var mclose= dlfunc(getlib(), 'mysql_close', 'vp');
        mclose(self.mysql);
        var n= new 'Undef';
        self.mysql= n;
    }
    function get_client_info()
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_get_client_info', 'tv');
        string s= f();
        return s;
    }
    function error()
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_error', 'tp');
        string s= f(self.mysql);
        return s;
    }
    function connect(string host, string user, string pass, string database)
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_real_connect', 'ppttttitl');
        string snull;
        var p= f(self.mysql, host, user, pass, database, 0, snull, 0);
        // This doesn't detect failure, must check nci issues.
        if (p == null) throw Error(self.error());
        var none = new 'UnManagedStruct';
        if (p == none) throw Error(self.error());
        return p;
    }
    function query(string stmt)
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_query', 'ipt');
        int q= f(self.mysql, stmt);
        if (q != 0) throw Error(self.error());
    }
    function use_result()
    {
        using WinxedMysql.getlib;
        var f= dlfunc(getlib(), 'mysql_use_result', 'pp');
        var r= f(self.mysql);
        var none = new 'UnManagedStruct';
        if (r == none) throw Error(self.error());
        var result= new WinxedMysql.Result;
        result.init(self.mysql, r);
        return result;
    }
}

} // namespace WinxedMysql

function main(argv)
{
    using extern Getopt.Obj;
    var getopts = new 'Getopt::Obj';
    getopts.notOptStop(1);
    getopts.push_string('host|h=s');
    getopts.push_string('user|u=s');
    getopts.push_string('password|p:s');
    getopts.push_string('database|D=s');
    argv.shift();
    var opts = getopts.get_options(argv);
    string host = opts['host'];
    string user = opts['user'];
    var vpass = opts['password'];
    string database = opts['database'];

    if (host == null || host == '') host = 'localhost';
    if (user == null || user == '') user = 'parrot';

    // Need a ver here, keyed string access returns empty
    // string instead of null in current parrot versions.
    string pass;
    if (vpass == null) pass = 'baDworD';
    else {
        pass= vpass;
        if (pass == '') die("Sorry, asking for password not implemented");
    }

    if (database == null || database == '') database = 'parrot';

    var mysql= new WinxedMysql.Connection;
    say('Mysql version: ', mysql.get_client_info());

    try {
        mysql.connect(host, user, pass, database);
        string q= 'select * from hello;';
        if (argv[0])
            q= argv[0];
        say("Query: '", q, "'");
        mysql.query(q);
        var result= mysql.use_result();
        int fields= result.field_count();

        int nrows= 0;
        var row= result.fetch_row();
        while (row != null) {
            ++nrows;
            print(nrows, ': ');
            int i;
            for (i= 0; i < fields; ++i) {
                if (i > 0) print(", ");
                var s= row.get(i);
                if (s == null) print('(null)');
                else print("'", s, "'");
            }
            say();
            row= result.fetch_row();
        }
        say('Total rows: ', nrows);
    }
    catch (e) {
        say("\tERROR: ", e['message']);
        mysql.close();
        throw e;
    }
    mysql.close();
}
