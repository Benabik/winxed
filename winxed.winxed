#! winxed

// Winxed compiler driver.
// Parses command line options, calls the compiler backend
// and eventually runs the generated program.

function showhelp(string name, options)
{
    say('Usage: ', name, ' [options] [program] [args]');
    say('  Available options:');
    int l= 0;
    int i;
    var o;
    for (o in options) {
        i= length(o[0]) + 4;
        if (i > l) l= i;
    }
    for (o in options) {
        string s= o[0];
        if (length(s) > 1 && substr(s, 1, 1) != '=')
            s= '--' + s;
        else
            s= '-' + s;
        i= l - length(s);
        say('    ', s, ' ' * i, '->  ', o[1]);
    }
}

function extname(string filename, string ext)
{
    // Strip a possible .winxed extension from filename,
    // add ext, and return the result.
    string newname;
    int l = length(filename);
    if (l > 7 && substr(filename, -7) == '.winxed')
        newname = substr(filename, 0, l - 7) + ext;
    else
        newname = filename + ext;
    return newname;
}

function main [main] (argv)
{
    var options = [
      [ 'c',        'Compile only. Same as --target=pir' ],
      [ 'e=s',      'Evaluate' ],
      [ 'o=s',      'Object name' ],
      [ 'noan',     'No code annotations' ],
      [ 'target=s', 'Set target type: pir, pbc or run. Default is run.' ],
      [ 'help',     'Show this help' ]
    ];

    using extern Getopt.Obj;
    var getopts = new 'Getopt::Obj';
    getopts.notOptStop(1);
    for (var o in options)
        getopts.push_string(o[0]);
    string name= argv.shift();
    var opts = getopts.get_options(argv);

    var help =        opts['help'];
    var compileonly = opts['c'];
    var noan =        opts['noan'];
    var eval =        opts['e'];
    var opt_o =       opts['o'];
    var opt_target =  opts['target'];

    if (help != null) {
        showhelp(name, options);
        return;
    }

    string obj = '';
    if (opt_o != null)
        obj = opt_o;

    const int TargetDefault = 0;
    const int TargetRun     = 1;
    const int TargetPir     = 2;
    const int TargetPbc     = 3;
    int target = TargetDefault;
    if (opt_target != null) {
        string starget = opt_target;
        switch (starget) {
        case 'pir':
            target = TargetPir;
            break;
        case 'pbc':
            target = TargetPbc;
            break;
        case 'run':
            target = TargetRun;
            break;
        default:
            die('Invalid target: ' + starget);
        }
    }
    if (compileonly != null) {
        if (target != TargetDefault)
            die("Conflicting options");
        target = TargetPir;
    }
    if (target == TargetDefault)
        target = TargetRun;

    string srcfile;
    if (eval == null) {
        int argc= argv;
        if (argc < 1) {
            say("ERROR: No program specified");
            showhelp(name, options);
            return;
        }
        srcfile = argv.shift();
    }

    string pirfile;
    if (obj != '' && target == TargetPir)
        pirfile = obj;
    else {
        if (eval)
            pirfile = '__eval__.pir';
        else
            pirfile = extname(srcfile, '.pir');
    }

    // Call backend compiler

    string cmd[] = [ 'winxedst0', '-c'];
    if (noan)
        cmd.push('--noan');;
    if (eval) {
        cmd.push('-e');
        cmd.push(eval);
    }
    cmd.push('-o');
    cmd.push(pirfile);
    cmd.push(srcfile);
    spawnw(cmd);

    // Use the OS pmc for file operations.
    var os = new 'OS';
    string runit[] = [ 'parrot' ];

    switch (target) {
    case TargetRun:
        // Execute result
        runit.push(pirfile);
        for (string a in argv)
            runit.push(a);
        spawnw(runit);
        // Delete the generated pir file.
        os.rm(pirfile);
        break;
    case TargetPbc:
        // Call parrot to ceate the pbc
        string objfile;
        if (obj != '')
            objfile = obj;
        else
            objfile = extname(srcfile, '.pbc');
        runit.push('-o');
        runit.push(objfile);
        runit.push(pirfile);
        spawnw(runit);
        // Delete the generated pir file.
        os.rm(pirfile);
        break;
    default:
        ; // Otherwise, nothing to do.
    }
}
